{% macro relationValueType relation %}{% if relation.toMany %}[UMD{{ relation.destinationEntity }}]{% else %}UMD{{ relation.destinationEntity }}{% endif %}{% endmacro %}
{% macro relationValueRead relation %}{% if relation.toMany %}(__managedObject.{{ relation.name }}?.{% if relation.isOrdered %}array{% else %}allObjects{% endif %} as? [{{ relation.destinationClassName }}]){% else %}__managedObject.{{ relation.name }}{% endif %}{% endmacro %}

import CoreData
{% if arguments.dbModuleName %}import {{ arguments.dbModuleName }}{% endif +%}

class UMDObject {}

protocol UMDObjectConvertable {
    associatedtype ResultType
    func umdObject() -> ResultType
}

private let umdTransformMap = [
{% for entity in entities %}
    "{{ entity.className }}": { (object: NSManagedObject) -> UMDObject in return {{ entity.className }}.umdObject(object as! {{ entity.className }}) },
{% endfor %}
]

extension NSManagedObject: UMDObjectConvertable {
    func umdObject() -> UMDObject {
        if let closure = umdTransformMap["\(type(of: self))"] {
            return closure(self)
        } else {
            preconditionFailure()
        }
    }
}

extension Array where Element == NSManagedObject {
    func umdObject() -> [UMDObject] { map { $0.umdObject() } }
}

// MARK: - UMD Objects

{% for entity in entities %}

extension UMDObjectConvertable where Self == {{ entity.className }} {
    func umdObject() -> UMD{{ entity.name }} { (self as NSManagedObject).umdObject() as! UMD{{ entity.name }} }
}

extension {{ entity.className }} {
    class func umdObject(_ object: {{ entity.className }}) -> UMD{{ entity.name }} { UMD{{ entity.name }}(object) }
}

extension Array where Element == {{ entity.className }} {
    func umdObject() -> [UMD{{ entity.name }}] { map { ($0 as NSManagedObject).umdObject() as! UMD{{ entity.name }} } }
}

{% endfor %}

{% for entity in entities %}
// unmanageddata:file:UMD{{ entity.name }}.generated.swift
import Combine
import CoreData
import Foundation
{% if arguments.dbModuleName %}import {{ arguments.dbModuleName }}{% endif +%}

class UMD{{ entity.name }}{% if entity.parentName %}: UMD{{ entity.parentName }}{% else %}: UMDObject{% endif %} {
    private let __managedObject: {{ entity.className }}
    private let __context: NSManagedObjectContext
    {% if not entity.parentName %}
    private var __mergeObserver: NSObjectProtocol?
    private var __saveObserver: NSObjectProtocol?
    private var __isDeleted: Bool = false
    public var isDeleted: Bool { __context.performAndWait { __managedObject.isDeleted } || __isDeleted }
    public let didChangePublisher: PassthroughSubject<Void, Never> = PassthroughSubject()
    {% endif %}

    // MARK: - Attributes

    {% for attribute in entity.attributes %}
    public var {{ attribute.name }}: {{ attribute.swiftType }}{% if attribute.isOptional %}?{% endif +%}
    {% endfor %}

    // MARK: - Relationships

    {% for relation in entity.relationships %}
    public var {{ relation.name }}: {%+ call relationValueType relation %}{% if relation.isOptional %}?{% else %}!{% endif +%} {
        __context.performAndWait {
            {%+ call relationValueRead relation %}?.umdObject()
        }
    }
    {% endfor %}

    // MARK: - Fetched Properties

    {% for property in entity.fetchedProperties %}
    public var {{ property.name }}: [UMD{{ property.fetchRequest.entity }}]{% if property.isOptional %}?{% else %}!{% endif +%} {
        __context.performAndWait {
            (__managedObject.value(forKey: "{{ property.name }}") as? [{{ property.fetchRequest.className }}])?.umdObject()
        }
    }
    {% endfor %}

    // MARK: - Implementation

    public init(_ managedObject: {{ entity.className }}) {
        __managedObject = managedObject
        __context = managedObject.managedObjectContext!

        {% for attribute in entity.attributes %}
        var {{ attribute.name }}: {{ attribute.swiftType }}?
        {% endfor %}
        
        __context.performAndWait {
            {% for attribute in entity.attributes %}
            {{ attribute.name }} = managedObject.{{ attribute.name }}
            {% endfor %}
        }
        
        {% for attribute in entity.attributes %}
        self.{{ attribute.name }} = {{ attribute.name }}{% if not attribute.isOptional %}!{% endif +%}
        {% endfor %}

        {% if entity.parentName %}
        super.init(managedObject)
        {% else %}
        super.init()
        subsribeContext()
        {% endif %}
    }

    {% if not entity.parentName %}
    deinit {
        unsubsribeContext()
    }
    
    private func subsribeContext() {
        __mergeObserver = NotificationCenter.default.addObserver(forName: .NSManagedObjectContextDidMergeChangesObjectIDs, object: __context, queue: nil) { [weak self] notification in
            self?.process(notification: notification)
        }

        __saveObserver = NotificationCenter.default.addObserver(forName: .NSManagedObjectContextDidSaveObjectIDs, object: __context, queue: nil) { [weak self] notification in
            self?.process(notification: notification)
        }
    }
    
    private func unsubsribeContext() {
        if let observer = __mergeObserver {
            NotificationCenter.default.removeObserver(observer)
            __mergeObserver = nil
        }

        if let observer = __saveObserver {
            NotificationCenter.default.removeObserver(observer)
            __saveObserver = nil
        }
    }
    
    private func process(notification: Notification) {
        let objectID = __managedObject.objectID
        var hasChanges: Bool = false
        var isDeleted: Bool = false

        if hasChanges == false, let objects = notification.userInfo?[NSUpdatedObjectIDsKey] as? Set<NSManagedObjectID> {
            if objects.first(where: { $0 == objectID }) != nil {
                hasChanges = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSDeletedObjectIDsKey] as? Set<NSManagedObjectID> {
            if objects.first(where: { $0 == objectID }) != nil {
                hasChanges = true
                isDeleted = true
            }
        }

        if hasChanges == false, let objects = notification.userInfo?[NSRefreshedObjectIDsKey] as? Set<NSManagedObjectID> {
            if objects.first(where: { $0 == objectID }) != nil {
                hasChanges = true
            }
        }

        if isDeleted == true {
            unsubsribeContext()
            didDelete()
        } else if hasChanges == true {
            willChange()
            updateValues()
        }
    }
    
    public func willChange() {}
    
    public func didChange() {
        didChangePublisher.send()
    }
    
    public func didDelete() {
        __isDeleted = true
        didChangePublisher.send()
    }
    {% endif %}

    {%+ if entity.parentName %}override {%+ endif %}public func updateValues() {
        {% for attribute in entity.attributes %}
        {{ attribute.name }} = __managedObject.{{ attribute.name }}{% if not attribute.isOptional and not attribute.usesPrimitiveValue%}!{% endif +%}
        {% endfor %}
        
        {% if parentName %}
        super.updateValues()
        {% else %}
        didChange()
        {% endif %}
    }
}
// unmanageddata:file:end
{% endfor %}
